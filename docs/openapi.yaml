openapi: '3.0.3'

info:
  title: e-ten
  version: 1.0.0

components:
  schemas:
    User:
      properties:
        id:
          type: integer
          format: uuid
        role:
          type: integer
        e-mail:
          type: string
          format: email
        name:
          type: string
        course_id:
          type: integer

    Event:
      properties:
        id:
          type: integer
          format: uuid
        name:
          type: string
        description:
          type: string
        image_path:
          type: string
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time

    # Workの一覧用のプロパティ
    WorkList:
      required: [id, name, catch_copy, image_path]
      properties:
        id:
          type: integer
          format: uuid
        name:
          type: string
        genres:
          type: array
          items:
            type: string
        technologies:
          type: array
          items:
            type: string
        catch_copy:
          type: string
        image_path:
          type: string

    # Workの詳細用のプロパティ
    WorkDetail:
      required: [description, users]
      properties:
        description:
          type: string
        images:
          type: array
          items:
            type: string
        movie:
          type: string
        # user_idの配列
        users:
          type: array
          items:
            type: integer
            format: uuid

    Work:
      type: object
      description: 作品
      allOf:
        - $ref: '#/components/schemas/WorkList'
        - $ref: '#/components/schemas/WorkDetail'

paths:
  /site-password:
    post:
      summary: サイトパスワードの検証
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
      responses:
        200:
          description: OK

        401:
          description: パスワードを間違えています
  /sign-up:
    post:
      summary: アカウントの新規作成
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                e-mail: { type: string }
                password: { type: string }
      responses:
        201:
          description: OK
          # TODO: tokenの返却
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         token:
          #           type: string
        409:
          description: メールアドレスが既に登録されています

  /sign-in:
    post:
      summary: アカウントのログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                e-mail: { type: string }
                password: { type: string }
      responses:
        200:
          description: OK
          # TODO: tokenの返却
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          # token:
          # type: string

        401:
          description: Client side error
  /events:
    get:
      summary: イベント一覧の取得
      tags: ['events']
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  items:
                    $ref: '#/components/schemas/Event'

  /event/{id}/works:
    get:
      summary: 作品一覧の取得
      tags: ['events']

      # 検索項目
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: integer
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  items:
                    $ref: '#/components/schemas/WorkList'
  /works/{id}:
    get:
      summary: 作品の詳細の取得
      tags: ['works']
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Work'
    post:
      summary: 作品の新規作成
      tags: ['works']
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Work'
      responses:
        201:
          description: OK

    put:
      summary: 作品の更新
      tags: ['works']
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Work'
      responses:
        200:
          description: OK

    delete:
      summary: 作品の削除
      tags: ['works']
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uuid
      responses:
        200:
          description: OK
