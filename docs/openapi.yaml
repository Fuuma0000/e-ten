openapi: "3.0.3"

info:
  title: e-ten
  version: 1.0.0

components:
  responses:
    Created:
      description: created

  parameters:
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
    work_id:
      name: work_id
      in: path
      required: true
      schema:
        type: integer
    event_id:
      name: event_id
      in: path
      required: true
      schema:
        type: integer

  schemas:
    # TODO: エラーメッセージ考える
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32

    User:
      type: object
      description: ユーザー
      allOf:
        - $ref: "#/components/schemas/UserList"
        - $ref: "#/components/schemas/UserDetail"

    # Userの一覧用のプロパティ
    UserList:
      required: [user_id, username, enrollment_year, graduation_year]
      properties:
        user_id:
          type: integer
        username:
          type: string
        enrollment_year:
          type: integer
          format: date-time
        graduation_year:
          type: integer
          format: date-time
        job:
          description: 志望職種
          type: array
          items:
            type: string
        icon_url:
          description: アイコン画像のURL
          type: string
    # Userの詳細用のプロパティ
    UserDetail:
      required: [e-mail]
      properties:
        e-mail:
          type: string
          format: email
        course:
          description: 所属コース(IT/Web/経営情報)
          type: string
        is_job_hunt_completed:
          description: 就職活動を終えたかどうか
          type: boolean
        self_introduction:
          description: 自己PR
          type: string

    Event:
      properties:
        event_id:
          type: integer
        name:
          type: string
        description:
          type: string
        icon_url:
          type: string
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time

    # Workの一覧用のプロパティ
    WorkList:
      required: [id, name, catch_copy, icon_url]
      properties:
        work_id:
          type: integer
        name:
          type: string
        genres:
          type: array
          items:
            type: string
        technologies:
          type: array
          items:
            type: string
        catch_copy:
          type: string
        icon_url:
          type: string

    # Workの詳細用のプロパティ
    WorkDetail:
      required: [description, users]
      properties:
        description:
          type: string
        images:
          type: array
          items:
            type: string
        movie:
          type: string
        works_url:
          description: 作品のURL
          type: string
        users:
          type: array
          description: チームメンバーのidと名前と役割のオブジェクトの配列
          items:
            type: object
            items:
              properties:
                user_id:
                  type: integer
                usernane:
                  type: string
                role:
                  type: integer

    Work:
      type: object
      description: 作品
      allOf:
        - $ref: "#/components/schemas/WorkList"
        - $ref: "#/components/schemas/WorkDetail"

paths:
  /site-password:
    post:
      summary: サイトパスワードの検証
      operationId: sitePassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
      responses:
        200:
          description: OK

        401:
          description: パスワードを間違えています

  /sign-up:
    post:
      summary: アカウントの新規作成
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                e-mail: { type: string }
                password: { type: string }
      responses:
        201:
          description: OK
          # TODO: tokenの返却
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         token:
          #           type: string
        409:
          description: メールアドレスが既に登録されています

  /verify:
    get:
      summary: ユーザーのメール認証
      description: メール認証のエンドポイント
      parameters:
        - name: id
          in: query
          required: true
          description: ユーザーID
          schema:
            type: string
        - name: random
          in: query
          required: true
          description: ランダム文字列
          schema:
            type: string
        - name: expires
          in: query
          required: true
          description: 有効期限
          schema:
            type: string
      responses:
        200:
          description: 認証成功
        400:
          description: 不正なリクエスト
        404:
          description: ユーザーが見つかりません

  /sign-in:
    post:
      summary: アカウントのログイン
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                e-mail: { type: string }
                password: { type: string }
      responses:
        200:
          description: OK
          # TODO: tokenの返却
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          # token:
          # type: string

        401:
          description: Client side error
  /events:
    get:
      summary: イベント一覧の取得
      operationId: getAllEvents
      tags: ["event"]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /event/{id}/works:
    get:
      summary: 作品一覧の取得
      operationId: getWorks
      tags: ["event"]

      # 検索項目
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  items:
                    $ref: "#/components/schemas/WorkList"
  /works/{id}:
    get:
      summary: 作品の詳細の取得
      operationId: getWork
      tags: ["work"]
      parameters:
        - $ref: "#/components/parameters/work_id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Work"

    post:
      summary: 作品の新規作成
      operationId: createWork
      tags: ["work"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Work"
      responses:
        201:
          description: OK

    put:
      summary: 作品の更新
      operationId: updateWork
      tags: ["work"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Work"
      responses:
        200:
          description: OK

    delete:
      summary: 作品の削除
      operationId: deleteWork
      tags: ["work"]
      parameters:
        - $ref: "#/components/parameters/work_id"
      responses:
        200:
          description: OK

  /events/{id}/students/:
    get:
      summary: イベントに参加している学生の一覧
      tags: ["student"]
      operationId: getAllStudents
      parameters:
        - $ref: "#/components/parameters/event_id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserList"
  /profiles/{id}:
    get:
      summary: 学生情報の詳細
      tags: ["student"]
      operationId: getStudent
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      summary: 学生情報の更新
      tags: ["student"]
      operationId: updateStudent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK

    delete:
      summary: 学生の削除
      tags: ["student"]
      operationId: deleteStudent
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        200:
          description: OK
